name: TEST 6.18

on:
  workflow_dispatch:
    inputs:
      LinuxFamily:
        description: 'Linux Family'
        required: true
        default: 'rockchip64'
        type: choice
        options:
          - 'rockchip64'
          - 'meson64'
      BRANCH:
        description: 'Linux Branch'
        default: 'edge'
        required: true
        type: choice
        options:
          - 'edge'
      RC_VERSION:
        description: 'Build RC Version'
        default: '1'
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'

env:
  TZ: Asia/Shanghai

jobs:
  Build-Kernel:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check input combination
        run: |
          echo "START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> ${GITHUB_ENV}
          echo "LinuxFamily: ${{ inputs.LinuxFamily }}"
          echo "BRANCH: ${{ inputs.BRANCH }}"
          case "${{ inputs.LinuxFamily }}" in
            rk35xx)
              if [ "${{ inputs.BRANCH }}" != "vendor" ]; then
                echo "rk35xx only supports vendor branch."
                exit 1
              fi
              ;;
            meson)
              if [ "${{ inputs.BRANCH }}" != "current" ]; then
                echo "meson only supports current branch."
                exit 1
              fi
              ;;
            rockchip64|meson64)
              if [ "${{ inputs.BRANCH }}" = "vendor" ]; then
                echo "${{ inputs.LinuxFamily }} does not support vendor branch."
                exit 1
              fi
              ;;
            *)
              echo "Unsupported LinuxFamily: ${{ inputs.LinuxFamily }}"
              exit 1
              ;;
          esac

      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker_images_ids=$(docker images -q)
          [ -n "${docker_images_ids}" ] && docker rmi ${docker_images_ids}
          docker system prune -a -f
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          LOOP_MNT=$(sudo losetup -f --show /mnt/mnt.img)
          LOOP_ROOT=$(sudo losetup -f --show /root.img)
          sudo pvcreate "${LOOP_MNT}"
          sudo pvcreate "${LOOP_ROOT}"
          sudo vgcreate -y github "${LOOP_MNT}" "${LOOP_ROOT}"
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /mnt/workdir
          sudo mount /dev/github/runner /mnt/workdir
          sudo chown ${USER}:${GROUPS} /mnt/workdir
          df -Th

      - name: Download source code
        working-directory: /mnt/workdir
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://github.com/armbian/build.git build
          ln -sf /mnt/workdir/build ${GITHUB_WORKSPACE}/build

      - name: Apply patches
        working-directory: /mnt/workdir/build
        run: |
          "${GITHUB_WORKSPACE}/scripts/apply_patches.sh"
          "${GITHUB_WORKSPACE}/scripts/rename_to_conf.sh"
          sed -i 's|https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git|https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git|' lib/functions/configuration/main-config.sh
          sed -i "s|tag:v6\.18-rc[1-7]|tag:v6\.18-rc${{ inputs.RC_VERSION }}|" config/sources/mainline-kernel.conf.sh
          ls -la

      - name: Compile Kernel [ ${{ inputs.LinuxFamily }} ${{ inputs.BRANCH }} ]
        working-directory: /mnt/workdir/build
        run: |
          BoardFamily=${{ inputs.LinuxFamily }}
          case "${BoardFamily}" in
            rockchip64) BoardFamily="nanopct4" ;;
            meson64)    BoardFamily="aml-s9xx-box" ;;
            rk35xx)     BoardFamily="rock-5c" ;;
            meson)      BoardFamily="onecloud" ;;
          esac
          ./compile.sh kernel BOARD=${BoardFamily} BRANCH=${{ inputs.BRANCH }} PREFER_DOCKER=no DOCKER_ARMBIAN_BASE_IMAGE=ubuntu:noble DEB_COMPRESS=xz SHARE_LOG=yes

      - name: Prepare Kernel Metadata
        working-directory: /mnt/workdir/build/output/debs
        run: |
          Kernel_File=$(find . -maxdepth 1 -type f -name 'linux-image-*.deb' -printf '%f\n' | head -n 1)
          if [ -n "${Kernel_File}" ]; then
            echo "Kernel_File: ${Kernel_File}"
            KERNEL_VERSION=$(echo "${Kernel_File}" | cut -d '_' -f 5 | cut -d '-' -f 1)
            [[ ! "${KERNEL_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && KERNEL_VERSION="${KERNEL_VERSION}.0"
            echo "KERNEL_VERSION=${KERNEL_VERSION}" >> ${GITHUB_ENV}
            echo "KERNEL_VERSION: ${KERNEL_VERSION}"
            LINUX_FAMILY=$(echo "${Kernel_File}" | cut -d '_' -f 1 | awk -F '-' '{print $NF}')
            echo "LINUX_FAMILY=${LINUX_FAMILY}" >> ${GITHUB_ENV}
            echo "LINUX_FAMILY: ${LINUX_FAMILY}"
          else
            echo "No matching file found. Available files are:"
            ls -1 "/mnt/workdir/build/output/debs"
            exit 1
          fi
          matching_files_array=($(ls linux-dtb* linux-headers* linux-image* linux-libc* 2>/dev/null))
          if [ ${#matching_files_array[@]} -gt 0 ]; then
            renamed_files=()
            for f in "${matching_files_array[@]}"; do
              base_name=$(echo "${f}" | sed -E 's/_.*//')
              newf="${base_name}-${KERNEL_VERSION}.deb"
              if [ "${f}" != "${newf}" ]; then
                mv "${f}" "${newf}"
              fi
              renamed_files+=("${newf}")
            done
            tar -czf "../kernel-${KERNEL_VERSION}-${LINUX_FAMILY}.tar.gz" "${renamed_files[@]}" || { echo "Failed to create tar.gz file"; exit 1; }
            echo "Compressed matching files to kernel-${KERNEL_VERSION}-${LINUX_FAMILY}.tar.gz"
          else
            echo "No matching files found for compression."
            ls -1 "/mnt/workdir/build/output/debs"
            exit 1
          fi
          tar -tzf "../kernel-${KERNEL_VERSION}-${LINUX_FAMILY}.tar.gz" || { echo "Failed to verify tar.gz file"; exit 1; }

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        with:
          tag: "Kernel-${{ env.LINUX_FAMILY }}"
          name: "Kernel-${{ env.LINUX_FAMILY }}"
          artifacts: "/mnt/workdir/build/output/kernel-${{ env.KERNEL_VERSION }}-${{ env.LINUX_FAMILY }}.tar.gz"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### Armbian Kernel Packages for ${{ env.LINUX_FAMILY }}
            - Usage: After extraction, install the packages (e.g. `dpkg -i *.deb`)
            - Included: `linux-dtb` `linux-headers` `linux-image` `linux-libc-dev`
          draft: false
          prerelease: false

      - name: Prepare SHA256 Metadata
        working-directory: /mnt/workdir/build/output
        run: |
          sleep 15 && "${GITHUB_WORKSPACE}/scripts/sha256.sh"
          ls -la

      - name: Upload SHA256 to Release
        uses: ncipollo/release-action@main
        with:
          tag: "Kernel-${{ env.LINUX_FAMILY }}"
          name: "Kernel-${{ env.LINUX_FAMILY }}"
          artifacts: "/mnt/workdir/build/output/sha256.txt"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### Armbian Kernel Packages for ${{ env.LINUX_FAMILY }}
            - Usage: After extraction, install the packages (e.g. `dpkg -i *.deb`)
            - Included: `linux-dtb` `linux-headers` `linux-image` `linux-libc-dev`
          draft: false
          prerelease: false

      - name: Delete releases and workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: false
          releases_keep_latest: 10
          delete_workflows: true
          workflows_keep_day: 3
          gh_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Workflow Duration
        id: duration
        run: |
          start_time="${{ env.START_TIME }}"
          echo "Start time: ${start_time}"
          end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "End time: ${end_time}"
          duration=$(( $(date -d "${end_time}" +%s) - $(date -d "${start_time}" +%s) ))
          echo "Workflow duration: ${duration} seconds"
          echo "DURATION=${duration}" >> ${GITHUB_ENV}

      - name: Telegram notification
        run: |
          HOURS=$(( ${{ env.DURATION }} / 3600 ))
          MINUTES=$(( ( ${{ env.DURATION }} % 3600 ) / 60 ))
          SECONDS=$(( ${{ env.DURATION }} % 60 ))
          MSG="
          ${{ env.KERNEL_VERSION }}-${{ env.LINUX_FAMILY }} 编译完成！
          耗时: ${HOURS} 时 ${MINUTES} 分 ${SECONDS} 秒
          "
          echo "Sending message: ${MSG}"
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"
